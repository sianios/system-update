#!/bin/bash
version="1.1.6"

if [ $EUID -ne 0 ]; then
    echo "Error: Root user is required to execute.."
    exit 1
fi

# color functions
#red
error_() {
    echo $(tput setaf 1)$@$(tput sgr0)
}
#green
info_() {
    echo -e $(tput setaf 2)$@$(tput sgr0)
}
#yellow
warning_() {
    echo $(tput setaf 3)$@$(tput sgr0)
}

# 
apt-security() {
    #local tmp_list=$(mktemp /tmp/update-XXXX)
    local tmp_list=/tmp/security.list.$$
    local list=/etc/apt/sources.list

    if [ ! -f $list ]; then
        return
    fi

    grep "security" $list | grep -v "src" | cut -d "#" -f 2 > $tmp_list

    apt upgrade -V -o Dir::Etc::SourceList=$tmp_list
    rm $tmp_list
}

# Print list of sources list files available to edit
sources() {
    # if no filename given
    if [ -z $1 ]; then
        # print list of sources list files
        local i=1
        for f in $(find /etc/apt/ -type f -iname *.list -printf "%f\n"); do
            local lists[$i]="$f"
            echo "$i) $f"
            ((i++))
        done

        lists[$i]="Return Back"
        echo -e "\n$i) ${lists[$i]}\n"
        read -p "Enter source list number [1]: " i

        # report invalid option and exit
        case ${lists[$i]} in
            '') error_ "Error: No source list found. Must be number within range."
                return ;;
            "Return Back") return ;;
        esac

        # Set list name to edit
        local list="${lists[$i]}"

    # in case filename is given check if file exists, else report and
    # exit
    elif [[ -f $(find /etc/apt/ -type f -iname $1) ]]; then
        local list=$1
    else
        error_ "Error: $1 file not found, try again..."
        return
    fi

    # apt tries to create new file in case of sources.list
    if [ $list == "sources.list" ]; then
        unset list
    fi
    # edit source list command
    apt edit-sources $list

    read -p "Update package repositories now? [Y/n]: "
    case $REPLY in
        y|Y|'') apt update -qq ;;
        *) warning_ "Warning: Repositories not updated." ;;
    esac
}

vers() {
    info_ "System-Update\nVersion: "$version
    info_ "Github page: https://github.com/sianios/system-update"
}

# Find the fastest repository to download packages, works only on Debian
fastest-mirror() {
    if [ $(lsb_release -is) != "Debian" ]; then
        info_ "Your distro does not support this function."
        return
    fi

    local sources="/etc/apt/sources.list"
    if [ ! -f $sources ]; then
        error_ "Error: $sources not found."
        return
    fi

    # remove comments
    local file=$(cat $sources | grep -v '#')
    # arguments variable
    local args

    # Check if deb-src are enabled
    if [[ ! -z $( echo "$file" | grep 'deb-src' ) ]]; then
        args="$args -s"
    fi

    # Check if non-free is enabled
    if [[ ! -z $( echo "$file" | grep 'non-free' ) ]]; then
        args="$args -n"
    fi

    # check system release, if not testing select stable
    local release=$(lsb_release -rs)
    if [ "$release" != "testing" ]; then
        unset release
    fi


    # ask user to overide original sources.list or not
    read -p "Overide original sources.list? [Y/n]: "
    case $REPLY in
        y|Y|'') local sources_backup="$sources.$(date "+%Y_%m_%d_%H_%M")"
            cp $sources $sources_backup
            info_ "Info: $sources backup created $sources_backup"
            ;;
        *) sources="/tmp/sources.list"
            ;;
    esac

    args="$args -o $sources"
    info_ "netselect-apt saving in $sources"

    args="netselect-apt $release $args"
    eval $args
}

# Find and remove old kernels from system
purge_kernels() {
    # find which kernel the system loaded on boot
    local loaded=$(uname -r)
    # get list of old installed kernels
    local kernels=($(linux-version list | grep -v $loaded | cut -d "-" -f -2))
    # check if any kernels found and report
    if [ -z ${kernels[0]} ]; then
        info_ "Info: No Linux kernels found to remove."
        return
    fi

    ### create a list of packages to be removed from system
    local pkgs
    local i
    for i in "${!kernels[@]}"; do
        pkgs="$pkgs $(dpkg --get-selections | grep "${kernels[$i]}" | awk '{print $1}')"
    done

    warning_ "Warning: Removing Linux kernel might brake your system! Proceed with care and your own risk!"
    read -p "Proceed removing old kernels? [y/n]: "

    case $REPLY in
        y|Y) apt purge ${pkgs[*]} ;;
        *) return ;;
    esac 
}

# Function to check for new script version
check_update() {
    info_ "Info: Checking online for new version."
    local online_version="$(git ls-remote --tags https://github.com/sianios/system-update.git \
        | grep -v "{" | awk '{print $NF}' | cut -d "/" -f3 \
        | tr -d "v" | tail -n1)"

    # If local version is different with online download and update
    if [ "$online_version" != "$version" ]; then
        info_ "Info: Installing new version."
        # Download install script
        wget --quiet -O /tmp/install https://git.io/JfO2z
        # parce option in install script and skip version check
        bash /tmp/install f
    else # If the same report to user
        info_ "Info: System Update script latest version already installed."
    fi
}

help() {
cat <<EOF | column -L -t -s "|"
    Usage: update [option]

    Options:|Description:
    1, update|Update local repositories
    2, upgrade|Install available packages upgrades
    3, full-upgrade|Full-Upgrade install packages held back
    s, security|Upgrade only security packages
    l, list|List available packages upgrades
    a, autoremove|Autoremove useless packages
    k, remove-kernels|Remove old Linux kernels
    u, check-update|Check online for new version and update
    c, clear|Clean localy store packages
    f, fastest-mirror|Find the fastest mirror
    e, sources|Edit repositorie sources list files
    h, history|View your apt history log
    m, menu|Print this help menu
    v, version|Print version
    q, quit|Exit running script
EOF
}

welcome() {
    if [ -z $flag ]; then
        info_ "Welcome to Systerm Update Script!\n"
        flag=1
    fi
}

main() {
    case $1 in
        1|update) apt update -qq ;;
        2|upgrade) apt upgrade -V -qq ;;
        3|full-upgrade) apt full-upgrade -V -qq ;;
        s|security) apt-security ;;
        l|list) apt list --upgradable ;;
        a|autoremove) apt autoremove --purge ;;
        k|remove-kernels) purge_kernels ;;
        c|clear) apt clean ;;
        e|sources) sources $2 ;;
        f|fastest-mirror) fastest-mirror ;;
        h|history) less -N /var/log/apt/history.log ;;
        m|menu) help ;;
        u|check-update) check_update ;;
        v|version) vers ;;
        q|quit) exit 0 ;;
        ?*) error_ "Error: '$1' option not available. Try option 'm' for menu." ;;
    esac
}

while true; do

    if [ ! -z $1 ]; then
        main $1 $2
        break
    fi

    welcome
    read -p "Enter option (m - menu): "
    main $REPLY

done
