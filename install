#!/bin/bash

if [ $EUID -ne 0 ]; then
    echo "Error: Only root can install..."
    exit 1
fi

script=/usr/sbin/update
script_comp=/etc/bash_completion.d/update_completion
repo=https://github.com/sianios/system-update.git
log=/tmp/update.install.log

# Color functions
#red
error_() {
    echo "$(tput setaf 1)$@$(tput sgr0)"
    echo "$(date "+%d/%m/%Y - %H:%M"): $@" >> $log
}
#green, system related
info_() {
    echo -e "$(tput setaf 2)$@$(tput sgr0)"
    echo "$(date "+%d/%m/%Y - %H:%M"): $@" >> $log
}
#purple, script related
info2_() {
    echo -e "$(tput setaf 5)$@$(tput sgr0)"
    echo "$(date "+%d/%m/%Y - %H:%M"): $@" >> $log
}

# Check if script is suitable for the running distribution
check_system() {
    if [ ! -f /etc/os-release ]; then
        error_ "Error: /etc/os-release file not found..."
        exit 1
    fi

    local distro
    distro=$(cut -d '=' -f2 /etc/os-release | grep -x debian)

    if [ "$distro" != "debian" ]; then
        error_ "Error: Your disto is supported. Unable to install..."
        exit 1
    fi
}

# Check for script dependencies and install
check_dependencies() {
    local dep=( git netselect-apt lsb-release cron )
    local pkgs

    info2_ "Updating package repositories."
    #apt update -qq > /dev/null 2>&1
    if apt update -qq > /dev/null 2>&1; then
        info_ "Local package repositories update successfully."
    else
        error_ "Error: Local package repositories failed to update."
    fi

    # Loop to check one by one missing package dependencies
    for i in "${dep[@]}"; do
        if ! dpkg -l | awk '{print $2}' | grep -xq "$i"; then
#        if [[ -z $(dpkg -l | awk '{print $2}' | grep -x "$i") ]]; then
            pkgs="$pkgs $i"
        fi
    done

    if [ -n "$pkgs" ]; then
        info_ "Info: Installing dependencies."
        apt install -y -qq "$pkgs"
    fi
}

# Check for newer version online using git
check_version() {
    info2_ "Info: Checking for newer version online."
    
    # Get the latest version online
    local online_version
    online_version=$(git ls-remote --tags $repo | grep -v "{" \
        | awk '{print $NF}' | tail -n1 | tr -d "refs/tags/v")

    if [ -f $script ]; then
        if grep -q $online_version $script; then
            info2_ "Info: You already have the latest version of System-Update script."
            exit 1
        else
            info2_ "Info: Updating to version $online_version."
        fi
    fi
}

# Install function, download and install
install_() {
    # Temp download directory
    local src_dir
    src_dir=$(mktemp -d /tmp/system-updateXXXX)

    info2_ "Info: Downloading System Update script!"
    git clone -q $repo $src_dir || error_ "Error: Unable to clone repository..."

    # Clean any previous versions
    if [ -f $script ]; then
        rm $script
    fi
    if [ -f $script_comp ]; then
        rm $script_comp
    fi

    # Check directories
    if [ ! -d /var/lib/update ]; then
        mkdir /var/lib/update
    fi
    if [ ! -d /etc/update ]; then
        mkdir /etc/update
    fi

    # Install new files
    install "$src_dir"/update $script || error_ "Unable to install System Update script."
    install "$src_dir"/update_completion $script_comp || error_ "Unable to install System Update script bash completion file."
    install "$src_dir"/cron.sh /var/lib/update/cron.sh || error_ "Unable to install System Update script library file."
    install "$src_dir"/shared_functions /var/lib/update/shared_functions || error_ "Unable to install shared function file."

    # Check if configuration file exists to install if changed take the
    # values
    #if [ -f /etc/update/update.conf ]; then
    if ! diff -q "$src_dir"/update.conf /etc/update/update.conf; then
        local token
        token=$(grep access_token= /etc/update/update.conf)
        install "$src_dir"/update.conf /etc/update/update.conf || error_ "Unable to install System Update script configuration file."
        sed -i "s/access_token=/$token/g" /etc/update/update.conf
    else
        install "$src_dir"/update.conf /etc/update/update.conf || error_ "Unable to install System Update script configuration file."
    fi

    if [ ! -L /usr/sbin/up ]; then
        ln -s $script /usr/sbin/up
    fi

    info2_ "\nInstall completed!"
    info2_ "To enable System Update script auto completion execute:\nsource /etc/bash_completion.d/update_completion"

    #temp download directory cleanup
    if [ -d "$src_dir" ]; then
        rm -rf "$src_dir" && info_ "Temporary download directory deleted!"
    fi
}

main() {
    check_system
    check_dependencies
    # -n, string is not null
    # ! -n, string is null
    # If null check for new version, if not null skip
    if [ -z "$1" ]; then
        check_version
    fi
    install_
}

info_ "Install log created: $log"
main "$1"
