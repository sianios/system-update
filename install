#!/bin/bash

#red
error_() {
    echo $(tput setaf 1)$@$(tput sgr0)
}
#green, system related
info_() {
    echo -e $(tput setaf 2)$@$(tput sgr0)
}
#purple, script related
info2_() {
    echo -e $(tput setaf 5)$@$(tput sgr0)
}

if [ $EUID -ne 0 ]; then
    error_ "Error: Only root can install..."
    exit 1
fi

script=/usr/sbin/update
script_comp=/etc/bash_completion.d/update_completion
repo=https://github.com/sianios/system-update.git

# Check if script is suitable for the running distribution
check_system() {
    if [ ! -f /etc/os-release ]; then
        error_ "Error: /etc/os-release file not found..."
        exit 1
    fi

    local distro=$(grep debian /etc/os-release | cut -d '=' -f2 | grep -x debian)

    if [ "$distro" != "debian" ]; then
        error_ "Error: Your disto is supported. Unable to install..."
        exit 1
    fi
}

# Check for script dependencies and install
check_dependencies() {
    local dep=( git netselect-apt lsb-release )
    local pkgs

    info2_ "Updating package repositories."
    apt update -qq

    # Loop to check one by one missing package dependencies
    for i in ${dep[@]}; do
        if [[ -z $(dpkg -l | awk '{print $2}' | grep -x $i) ]]; then
            pkgs="$pkgs $i"
        fi
    done

    if [ ! -z "$pkgs" ]; then
        info_ "Info: Installing dependencies."
        apt install -y -qq $pkgs
    fi
}

# Check for newer version online using git
check_version() {
    info2_ "Info: Checking for newer version online."
    
    # Get the latest version online
    local online_version=$(git ls-remote --tags $repo \
        | grep -v "{" | awk '{print $NF}' | cut -d "/" -f3 \
        | tr -d "v" | tail -n1)

    if [ -f $script ]; then
        if [[ ! -z "$(grep $online_version $script)" ]]; then
            info2_ "Info: You already have the latest version of System-Update script."
            exit 1
        else
            info2_ "Info: Updating to version $online_version."
        fi
    fi
}

install_() {
    #temp download directory
    local src_dir=$(mktemp -d /tmp/system-updateXXXX)

    info2_ "Info: Downloading System Update script!"
    git clone -q $repo $src_dir || error_ "Error: Unable to clone repository..."

    # Clean any previous versions
    if [ -f $script ]; then
        rm $script
    fi
    if [ -f $script_comp ]; then
        rm $script_comp
    fi
    # Install new files
    install $src_dir/update $script || error_ "Unable to install System Update script"
    install $src_dir/update_completion $script_comp || error_ "Unable to install System Update script bash completion file."

    if [ ! -L /usr/sbin/up ]; then
        ln -s $script /usr/sbin/up
    fi

    info2_ "\nInstall completed!"
    info2_ "To enable System Update script auto completion execute:\nsource /etc/bash_completion.d/update_completion"

    #temp download directory cleanup
    if [ -d $src_dir ]; then
        rm -rf $src_dir && info_ "Temporary download directory deleted!"
    fi
}

main() {
    check_system
    check_dependencies
    # -n, string is not null
    # ! -n, string is null
    # If null check for new version, if not null skip
    if [ ! -n "$1" ]; then
        check_version
    fi
    install_
}

main $1
